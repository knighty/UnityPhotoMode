//https://en.m.wikibooks.org/wiki/Cg_Programming/Unity/Computing_Color_Histograms

#pragma kernel HistogramInitialize
#pragma kernel HistogramMain
#pragma kernel HistogramMaxInitialize
#pragma kernel HistogramMax

Texture2D<float4> InputTexture; // input texture

struct histStruct {
	uint4 color;
};
RWStructuredBuffer<histStruct> HistogramBuffer;
RWStructuredBuffer<uint> HistogramMaxBuffer;

[numthreads(64,1,1)]
void HistogramInitialize(uint3 id : SV_DispatchThreadID) 
{
	HistogramBuffer[id.x].color = uint4(0, 0, 0, 0);
}

[numthreads(8,8,1)]
void HistogramMain (uint3 id : SV_DispatchThreadID) 
{
	float4 textureColor = InputTexture[id.xy];
	textureColor = pow(textureColor, 0.45);
	textureColor.a = dot(float3(0.39, 0.5, 0.1), textureColor.rgb);
	uint4 col = uint4(255.0 * textureColor);

	InterlockedAdd(HistogramBuffer[col.r].color.r, 1);
	InterlockedAdd(HistogramBuffer[col.g].color.g, 1); 
	InterlockedAdd(HistogramBuffer[col.b].color.b, 1); 
	InterlockedAdd(HistogramBuffer[col.a].color.a, 1); 
}

[numthreads(1,1,1)]
void HistogramMaxInitialize(uint3 id : SV_DispatchThreadID)
{
	HistogramMaxBuffer[0] = 0;
}

[numthreads(64,1,1)]
void HistogramMax(uint3 id : SV_DispatchThreadID) 
{
	if (id.x > 2 && id.x < 250) {
	//InterlockedMax(HistogramMaxBuffer[0], HistogramBuffer[id.x].color.r);
	//InterlockedMax(HistogramMaxBuffer[0], HistogramBuffer[id.x].color.g);
	//InterlockedMax(HistogramMaxBuffer[0], HistogramBuffer[id.x].color.b);
	InterlockedMax(HistogramMaxBuffer[0], HistogramBuffer[id.x].color.a);
	}
}